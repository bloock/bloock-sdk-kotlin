/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */
object Library {
    const val LIBRARY_NAME = "Bloock SDK"
    const val GROUP_ID = "com.bloock.sdk"
    const val ARTIFACT_NAME = "bloock-sdk"
    const val VERSION = "1.3.0"

    const val DESCRIPTION = "Bloock SDK for Java / Kotlin"
    const val SITE_URL = "https://www.bloock.com"
    const val GIT_URL = "scm:git:https://github.com/bloock/bloock-sdk-kotlin.git"

    const val DEVELOPER_ID = "mbaque_bloock"
    const val DEVELOPER_NAME = "Marc Baqu√©"
    const val DEVELOPER_EMAIL = "mbaque@bloock.com"

    const val LICENSE = "MIT License"
    const val LICENSE_URL = "https://raw.githubusercontent.com/bloock/bloock-sdk-kotlin/master/LICENSE"
}

object DependencyVersions {
    const val APACHE_COMMONS_VERSION = "1.14"
    const val KT_COROUTINES_RX_VERSION = "1.4.2"
    const val KTOR_VERSION = "1.5.0"
    const val WEB3_VERSION = "4.7.0"
    const val BOUNCY_CASTLE_VERSION = "1.46"
    const val RXJAVA_VERSION = "3.0.9"

    const val JUNIT_VERSION = "5.7.0"
    const val MOCKK_VERSION = "1.10.6"
}

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.4.30"
    id("org.unbroken-dome.test-sets") version "3.0.1"
    id("com.jfrog.bintray") version "1.8.5"
    id("org.jetbrains.dokka") version "1.4.20"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `maven-publish`
    signing
    idea
}

sourceSets {
    create("integrationTest") {
        withConvention(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet::class) {
            kotlin.srcDir("src/integrationTest/kotlin")
            java.srcDir("src/integrationTest/java")
            resources.srcDir("src/integrationTest/resources")
            compileClasspath += sourceSets["main"].output + configurations["testRuntimeClasspath"]
            runtimeClasspath += output + compileClasspath + sourceSets["test"].runtimeClasspath
        }
    }
}

task<Test>("integrationTest") {
    description = "Runs the integration tests"
    group = "verification"
    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
    classpath = sourceSets["integrationTest"].runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter(tasks["test"])
    useJUnitPlatform()
}

tasks.register<Jar>("sourcesJar") {
    archiveClassifier.set("sources")
    from(sourceSets.main.get().allJava)
}

tasks.register<Jar>("javadocJar") {
    archiveClassifier.set("javadoc")
    from(tasks.javadoc.get().destinationDir)
}

tasks.test.configure {
    useJUnitPlatform()
}

tasks.dokkaGfm.configure {
    outputDirectory.set(rootDir)
    moduleName.set("docs")
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // Kotlin
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Hashing

    // Utils
    implementation("commons-codec:commons-codec:${DependencyVersions.APACHE_COMMONS_VERSION}")
    api("io.reactivex.rxjava3:rxjava:${DependencyVersions.RXJAVA_VERSION}")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-rx3:${DependencyVersions.KT_COROUTINES_RX_VERSION}")

    // Networking
    implementation("io.ktor:ktor-client-core:${DependencyVersions.KTOR_VERSION}")
    implementation("io.ktor:ktor-client-cio:${DependencyVersions.KTOR_VERSION}")
    implementation("io.ktor:ktor-client-gson:${DependencyVersions.KTOR_VERSION}")
    implementation("io.ktor:ktor-client-logging:${DependencyVersions.KTOR_VERSION}")

    // Blockchain
    implementation("org.web3j:core:${DependencyVersions.WEB3_VERSION}")

    // Testing
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("io.ktor:ktor-client-mock:${DependencyVersions.KTOR_VERSION}")
    testImplementation("org.web3j:web3j-unit:${DependencyVersions.WEB3_VERSION}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${DependencyVersions.JUNIT_VERSION}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${DependencyVersions.JUNIT_VERSION}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${DependencyVersions.JUNIT_VERSION}")
    testImplementation("io.mockk:mockk:${DependencyVersions.MOCKK_VERSION}")
}


val MAVEN_UPLOAD_USER: String? by project
val MAVEN_UPLOAD_PWD: String? by project
publishing {
    repositories {
        maven {
            name = "MavenCentral"
            val releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            val snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = uri(if (version.toString().endsWith("SNAPSHOT")) snapshotsRepoUrl else releasesRepoUrl)
            credentials {
                username = MAVEN_UPLOAD_USER
                password = MAVEN_UPLOAD_PWD
            }
        }
    }
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["java"])
            artifact(tasks["sourcesJar"])
            artifact(tasks["javadocJar"])

            groupId = Library.GROUP_ID
            artifactId = Library.ARTIFACT_NAME
            version = Library.VERSION

            pom {
                name.set(Library.LIBRARY_NAME)
                description.set(Library.DESCRIPTION)
                url.set(Library.SITE_URL)
                licenses {
                    license {
                        name.set(Library.LICENSE)
                        url.set(Library.LICENSE_URL)
                    }
                }
                developers {
                    developer {
                        id.set(Library.DEVELOPER_ID)
                        name.set(Library.DEVELOPER_NAME)
                        email.set(Library.DEVELOPER_EMAIL)
                    }
                }
                scm {
                    connection.set(Library.GIT_URL)
                    developerConnection.set(Library.GIT_URL)
                    url.set(Library.SITE_URL)
                }

            }
        }
    }
}

signing {
    val      PGP_SIGNING_KEY: String? by project
    val PGP_SIGNING_PASSWORD: String? by project

    useInMemoryPgpKeys(PGP_SIGNING_KEY, PGP_SIGNING_PASSWORD)
    sign(publishing.publications["mavenJava"])
}
